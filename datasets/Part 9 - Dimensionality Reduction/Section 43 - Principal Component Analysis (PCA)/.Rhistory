View(df)
# COMPARACIONES MULTIPLE POR TUCKEY
pwc <- df%>%
group_by(S.D)%>%
tukey_hsd(M.S ~ GENOTYPES)
pwc
# COMPARACIONES MULTIPLE POR TUCKEY
pwc <- df%>%
group_by(S.D, CO2, GENOTYPES)%>%
tukey_hsd(M.S ~ I.S)
pwc
View(pwc)
# COMPARACIONES MULTIPLE POR TUCKEY
pwc <- df%>%
group_by(I.S)%>%
tukey_hsd(M.S ~ GENOTYPES)
pwc
# COMPARACIONES MULTIPLE POR TUCKEY
pwc <- df%>%
group_by(I.S)%>%
tukey_hsd(M.S ~ CO2)
pwc
# COMPARACIONES MULTIPLE POR TUCKEY  (Adecuarla según se quiera)
pwc <- df%>%
group_by(I.S)%>%
tukey_hsd(M.S ~ CO2)
pwc
Visualization: box plots with p-values
pwc <- pwc %>% add_xy_position(x = "CO2")
ggboxplot(PlantGrowth, x = "CO2", y = "M.S") +
stat_pvalue_manual(pwc, hide.ns = TRUE) +
labs(
subtitle = get_test_label(res.aov, detailed = TRUE),
caption = get_pwc_label(pwc)
)
#Visualization: box plots with p-values
pwc <- pwc %>% add_xy_position(x = "CO2")
ggboxplot(PlantGrowth, x = "CO2", y = "M.S") +
stat_pvalue_manual(pwc, hide.ns = TRUE) +
labs(
subtitle = get_test_label(res.aov, detailed = TRUE),
caption = get_pwc_label(pwc)
)
Visualization: box plots with p-values
pwc <- pwc %>% add_xy_position(x = "CO2")
ggboxplot(df, x = "CO2", y = "M.S") +
stat_pvalue_manual(pwc, hide.ns = TRUE) +
labs(
subtitle = get_test_label(res.aov, detailed = TRUE),
caption = get_pwc_label(pwc)
)
#Visualization: box plots with p-values
pwc <- pwc %>% add_xy_position(x = "CO2")
ggboxplot(df, x = "CO2", y = "M.S") +
stat_pvalue_manual(pwc, hide.ns = TRUE) +
labs(
subtitle = get_test_label(res.aov, detailed = TRUE),
caption = get_pwc_label(pwc)
)
#Visualization: box plots with p-values
pwc <- pwc %>% add_xy_position(x = "CO2")
ggboxplot(df, x = "CO2", y = "M.S") +
stat_pvalue_manual(pwc, hide.ns = TRUE) +
labs(
subtitle = get_test_label(anova, detailed = TRUE),
caption = get_pwc_label(pwc)
)
# CREA GRAFICO FACETEADO CON COMPARACIONES NO PARAMETRICAS (DUNN)
pwc <- pwc %>% add_xy_position(x = "CO2")
ggboxplot(
df, x = "CO2", y = "M.S",
facet = c("I.S")
) +
stat_pvalue_manual(pwc, hide.ns = TRUE)+
labs(caption = get_pwc_label(pwc)
)
# CREA GRAFICO FACETEADO CON COMPARACIONES PARAMETRICAS (TUCKEY)
pwc <- pwc %>% add_xy_position(x = "CO2")
ggboxplot(
df, x = "CO2", y = "M.S", p.adjust.method = "bonferroni",
facet = c("I.S")
) +
stat_pvalue_manual(pwc, hide.ns = TRUE)+
labs(caption = get_pwc_label(pwc)
)
elemento <- c("lettuce", "potatoes", "milk", "eggs", "bread", "cereal", "ground.beef",
"tomato.soup", "laundry.detergent", "aspirin")
tienda_A <- c(1.755, 2.655, 2.235, 0.975, 2.370, 4.695, 3.135, 0.930, 8.235, 6.690)
tienda_B <- c(1.78, 1.98, 1.69, 0.99, 1.70, 3.15, 1.88, 0.65, 5.99, 4.84)
tienda_C <- c(1.29, 1.99, 1.79, 0.69, 1.89, 2.99, 2.09, 0.65, 5.99, 4.99)
tienda_D <- c(1.29, 1.99, 1.59, 1.09, 1.89, 3.09, 2.49, 0.69, 6.99, 5.15)
datos <- data.frame(elemento, tienda_A, tienda_B, tienda_C, tienda_D)
datos
#Instalar paquete tidyr
require(tidyr)
datos_tabla_larga <- gather(data = datos, key = "tienda", value = "precio", 2:5)
head(datos_tabla_larga, 5)
View(datos_tabla_larga)
anova_pareado <- aov(formula = precio ~ tienda + Error(elemento/tienda),
data = datos_tabla_larga)
summary(anova_pareado)
datos <- as.matrix(datos[-1])
View(datos)
View(anova_pareado)
View(anova_pareado)
View(datos)
modelo_lm <- lm(datos ~ 1)
tienda <- factor(c("tienda_A", "tienda_B", "tienda_C", "tienda_D"))
library(car)
anova_pareado <- Anova(modelo_lm, idata = data.frame(tienda),
idesign = ~ tienda, type = "III")
summary(anova_pareado, multivariate = F)
pairwise.t.test(x = datos_tabla_larga$precio, g = datos_tabla_larga$tienda,
p.adjust.method = "holm", paired = TRUE, alternative = "two.sided")
#Carga librerias
library(gdata);library(readxl);library(ggplot2);library(dplyr);library(ggpubr);library(rstatix);library(car);library(lubridate);library(xlsx);library("readr");library(tidyverse); library(FactoMineR); library("factoextra"); library(ggthemes)
#Carga archivo (Cambiar ruta)
datos<- read_xlsx("C:/Users/Jose Alza/Desktop/Habas24/GENERAL24.xlsx")
#Me quedo con las columnas que quiero
df<-datos[,1:6]
#Quito a los datos originales “datos” las columnas 7 y 9 pero dejo riego
datos1<-datos[,-c(7,9)]
View(datos1)
#Transformo la primer columna en columna de referencia
datos1<- column_to_rownames(datos1, var = "ID")
# The variable riego (index = 6) is removed
# before PCA analysis
riego.pca <- PCA(datos1[,-6], graph = FALSE)
#Otra opción para lo mismo, quita columna 6 que no es numérica, luego escala y finalmente PCA
riego.pca <- PCA(scale(datos1[,-6]), graph = FALSE)
#Otra opción de colores para las elipses
uno<-fviz_pca_biplot(riego.pca,
col.ind = datos1$I.S, palette = c("#00AFBB", "#E7B800", "#FC4E07"),
addEllipses = TRUE,
ellipse.type =  "t" ,
col.var = "black", repel = TRUE,
legend.title = "Irrigation strategies",
title = NULL)
uno
#Negrita en todos los textos
uno+   theme(text = element_text(size=10, face="bold"))
fviz_pca_biplot
#Otra opción de colores para las elipses
uno<-fviz_pca_biplot(riego.pca,
col.ind = datos1$I.S, palette = c("#00AFBB", "#E7B800", "#FC4E07"),
addEllipses = TRUE,
ellipse.type =  "t" ,
col.var = "black", repel = TRUE, label = "bold",
legend.title = "Irrigation strategies",
title = NULL)
uno
uno<-fviz_pca_biplot(riego.pca,
col.ind = datos1$I.S, palette = c("#00AFBB", "#E7B800", "#FC4E07"),
addEllipses = TRUE,
ellipse.type =  "t" ,
col.var = "bold", repel = TRUE,
legend.title = "Irrigation strategies",
title = NULL)
uno
uno<-fviz_pca_biplot(riego.pca,
col.ind = datos1$I.S, palette = c("#00AFBB", "#E7B800", "#FC4E07"),
addEllipses = TRUE,
ellipse.type =  "t" ,
col.var = "black", repel = TRUE,
legend.title = "Irrigation strategies",
title = NULL)
uno
#Otra opción de colores para las elipses
uno<-fviz_pca_biplot(riego.pca,
col.ind = datos1$I.S, palette = c("#00AFBB", "#E7B800", "#FC4E07"),
addEllipses = TRUE,
ellipse.type =  "t" ,
col.var = "black", repel = TRUE,
fill.var = "black",
legend.title = "Irrigation strategies",
title = NULL)
uno
#Otra opción de colores para las elipses
uno<-fviz_pca_biplot(riego.pca,
col.ind = datos1$I.S, palette = c("#00AFBB", "#E7B800", "#FC4E07"),
addEllipses = TRUE,
ellipse.type =  "t" ,
col.var = "black", repel = TRUE,
fill.var = "bold",
legend.title = "Irrigation strategies",
title = NULL)
uno
#Otra opción de colores para las elipses
uno<-fviz_pca_biplot(riego.pca,
col.ind = datos1$I.S, palette = c("#00AFBB", "#E7B800", "#FC4E07"),
addEllipses = TRUE,
ellipse.type =  "t" ,
col.var = "black", repel = TRUE, size=14,
fill.var = "black",
legend.title = "Irrigation strategies",
title = NULL)
uno
#Otra opción de colores para las elipses
uno<-fviz_pca_biplot(riego.pca,
col.ind = datos1$I.S, palette = c("#00AFBB", "#E7B800", "#FC4E07"),
addEllipses = TRUE,
ellipse.type =  "t" ,
col.var = "black", repel = TRUE,
fill.var = "black",
legend.title = "IRRIGATION STRATEGIES",
title = NULL)
uno
#Negrita en todos los textos
uno+   theme(text = element_text(size=15, face="bold"))
#Negrita en todos los textos
uno+   theme(text.var = element_text(size=15, face="bold"))
#Negrita en todos los textos
uno+   theme(text = var_text(size=15, face="bold"))
#Otra opción de colores para las elipses
uno<-fviz_pca_biplot(riego.pca,
col.ind = datos1$I.S, palette = c("#00AFBB", "#E7B800", "#FC4E07"),
addEllipses = TRUE,
ellipse.type =  "t" ,
col.var = "black", repel = TRUE, face="bold",
fill.var = "black",
legend.title = "IRRIGATION STRATEGIES",
title = NULL)
uno
#Otra opción de colores para las elipses
uno<-fviz_pca_biplot(riego.pca,
col.ind = datos1$I.S, palette = c("#00AFBB", "#E7B800", "#FC4E07"),
addEllipses = TRUE,
ellipse.type =  "t" ,
col.var = "black", repel = TRUE,
fill.var = "black",
legend.title = "IRRIGATION STRATEGIES",
title = NULL)
uno
uno+theme_few()
#Otra opción de colores para las elipses
uno<-fviz_pca_biplot(riego.pca,
col.ind = datos1$I.S, palette = c("#FC4E07", "#00AFBB", "#E7B800"),
addEllipses = TRUE,
ellipse.type =  "t" ,
col.var = "black", repel = TRUE,
fill.var = "black",
legend.title = "IRRIGATION STRATEGIES",
title = NULL)
uno
#Otra opción de colores para las elipses
uno<-fviz_pca_biplot(riego.pca,
col.ind = datos1$I.S, palette = c("#00AFBB", "#FC4E07", "#E7B800"),
addEllipses = TRUE,
ellipse.type =  "t" ,
col.var = "black", repel = TRUE,
fill.var = "black",
legend.title = "IRRIGATION STRATEGIES",
title = NULL)
uno
#Otra opción de colores para las elipses
uno<-fviz_pca_biplot(riego.pca,
col.ind = datos1$I.S, palette = c( "#E7B800","#00AFBB", "#FC4E07"),
addEllipses = TRUE,
ellipse.type =  "t" ,
col.var = "black", repel = TRUE,
fill.var = "black",
legend.title = "IRRIGATION STRATEGIES",
title = NULL)
uno
uno+theme_few()
#Quito a los datos originales “datos” las columnas 7 y 9 pero dejo CO2
datos2<-datos[,-c(7,8)]
#Transformo la primer columna en columna de referencia
datos2<- column_to_rownames(datos2, var = "ID")
View(datos2)
#Otra opción para lo mismo, quita columna 6 que no es numérica, luego escala y finalmente PCA
co2.pca <- PCA(scale(datos2[,-6]), graph = FALSE)
#Otra opción de colores para las elipses
dos<-fviz_pca_biplot(co2.pca,
col.ind = datos2$CO2, palette = c("#00AFBB", "#E7B800", "#FC4E07"),
ggtheme= theme_minimal(), # otros theme_few()
addEllipses = TRUE,
ellipse.type = "t", ellipse.level=0.95,
col.var = "black", repel = TRUE,
legend.title = "CO2 CONCENTRATION")
dos
dos+theme_few()
#Otra opción de colores para las elipses
dos<-fviz_pca_biplot(co2.pca,
col.ind = datos2$CO2, palette = c("#00AFBB", "#E7B800", "#FC4E07"),
ggtheme= theme_minimal(), # otros theme_few()
addEllipses = TRUE,
ellipse.type = "t", ellipse.level=0.95,
col.var = "black", repel = TRUE,
legend.title = "CO2 CONCENTRATION",
title = NULL)
dos
dos+theme_few()
View(datos2)
View(datos2)
#Calculo el resultado de la PCA
res.pca <- PCA(scale(datos2[,-6]), graph = FALSE)
#Lo mismo quitando titulo y en blanco y negro
# Grafico variables con colores por contribución
fviz_pca_var(res.pca,
repel = FALSE,
col.var = "black",
ggtheme = theme_minimal())
#Lo mismo quitando titulo y en blanco y negro
# Grafico variables con colores por contribución
fviz_pca_var(res.pca,
repel = FALSE,
col.var = "black",
ggtheme = theme_few())
#Lo mismo quitando titulo y en blanco y negro
fviz_pca_var(res.pca,
repel = FALSE,
col.var = "black",
title = NULL
ggtheme = theme_few())
#Lo mismo quitando titulo y en blanco y negro
fviz_pca_var(res.pca,
repel = FALSE,
col.var = "black",
title = NULL,
ggtheme = theme_few())
#Lo mismo quitando titulo y en blanco y negro
fviz_pca_var(res.pca,
repel = FALSE,
col.var = "black",
title = NULL,
ggtheme = theme_few())
#Lo mismo quitando titulo y en blanco y negro
fviz_pca_var(res.pca,
repel = FALSE,
col.var = "black",
title = "otro"
ggtheme = theme_few())
#Lo mismo quitando titulo y en blanco y negro
fviz_pca_var(res.pca,
repel = FALSE,
col.var = "black",
title = otro,
ggtheme = theme_few())
#Lo mismo quitando titulo y en blanco y negro
fviz_pca_var(res.pca,
repel = FALSE,
col.var = "black",
title = "otro",
ggtheme = theme_few())
#Lo mismo quitando titulo y en blanco y negro
fviz_pca_var(res.pca,
repel = FALSE,
col.var = "black",
title = NULL,
ggtheme = theme_few())
#Lo mismo quitando titulo y en blanco y negro
fviz_pca_var(res.pca,
repel = FALSE,
col.var = "black",
title = " ",
ggtheme = theme_few())
fviz_pca_var(res.pca,
repel = FALSE,
col.var = "black",
title = " ",
ggtheme = theme_few())
fviz_pca_var(res.pca,
repel = TRUE,
col.var = "black",
title = " ",
ggtheme = theme_few())
fviz_pca_var(res.pca,
repel = FALSE,
col.var = "black",
title = " ",
ggtheme = theme_few())
fviz_pca_var(res.pca,
repel = FALSE,
col.var = "black",
title = " ",
ggtheme = theme_bw())
fviz_pca_var(res.pca,
repel = TRUE,
col.var = "black",
title = " ",
ggtheme = theme_few())
> mymatrix <- matrix(c(156,9421,1531,14797),nrow=2,byrow=TRUE)
> colnames(mymatrix) <- c("Disease","Control")
> rownames(mymatrix) <- c("Exposed","Unexposed")
> print(mymatrix)
dataset = read.csv(("C:/Users/Jose Alza/Documents/GitHub/Curso-ML-A-a-Z/datasets/Part 1 - Data Preprocessing/Section 2 -------------------- Part 1 - Data Preprocessing --------------------/Data.csv")
)
dataset$Age = ifelse(is.na(dataset$Age),ave(dataset$Age, FUN =function(x) mean(x,na.rm=TRUE)), dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),ave(dataset$Salary, FUN =function(x) mean(x,na.rm=TRUE)), dataset$Salary)
View(dataset)
dataset$Country = factor(dataset$Country,
levels = c("France", "Spain", "Germany"),
labels = c(1, 2, 3))
dataset$Purchased = factor(dataset$Purchased,
levels = c("No", "Yes"),
labels = c(0, 1))
#En R es todo más fácil solo cargar los datos
dataset = read.csv("C:/Users/Jose Alza/Documents/GitHub/Curso-ML-A-a-Z/datasets/Part 1 - Data Preprocessing/Section 2 -------------------- Part 1 - Data Preprocessing --------------------/Data.csv")
#Tratamiento de los valores NAs
# Tratamiento de los valores NA
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
View(dataset)
#En R es todo más fácil solo cargar los datos
datos = read.csv("C:/Users/Jose Alza/Documents/GitHub/Curso-ML-A-a-Z/datasets/Part 1 - Data Preprocessing/Section 2 -------------------- Part 1 - Data Preprocessing --------------------/Data.csv")
datos = dataset
dataset = datos
# Tratamiento de los valores NA
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
View(dataset)
View(datos)
# Codificar las variables categóricas en “R”
dataset$Country = factor(dataset$Country,
levels = c("France", "Spain", "Germany"),
labels = c(1, 2, 3))
dataset$Purchased = factor(dataset$Purchased,
levels = c("No", "Yes"),
labels = c(0,1))
str(dataset)
View(dataset)
View(dataset)
dataset$Country = factor(dataset$Country,
levels = c("France", "Spain", "Germany"),
labels = c(1, 2, 3))
dataset$Purchased = factor(dataset$Purchased,
levels = c("No", "Yes"),
labels = c(0,1))
install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
split
setwd("~/GitHub/Curso-ML-A-a-Z/datasets/Part 9 - Dimensionality Reduction/Section 43 - Principal Component Analysis (PCA)")
# Importar el dataset
dataset = read.csv('Wine.csv')
# Dividir los datos en conjunto de entrenamiento y conjunto de test
# install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Customer_Segment, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
# Escalado de valores
training_set[,-14] = scale(training_set[,-14])
testing_set[,-14] = scale(testing_set[,-14])
# ProyecciÃ³n de las componentes principales
# install.packages("caret")
library(caret)
# install.packages("e1071")
library(e1071)
pca = preProcess(x = training_set[, -14], method = "pca", pcaComp = 2)
training_set = predict(pca, training_set)
training_set = training_set[, c(2, 3, 1)]
testing_set = predict(pca, testing_set)
testing_set = testing_set[, c(2, 3, 1)]
# Ajustar el modelo de SVM con el conjunto de entrenamiento.
classifier = svm(formula = Customer_Segment ~ .,
data = training_set,
type = "C-classification",
kernel = "linear")
# PredicciÃ³n de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-3])
# Crear la matriz de confusiÃ³n
cm = table(testing_set[, 3], y_pred)
CM
cm
# VisualizaciÃ³n del conjunto de entrenamiento
#install.packages("ElemStatLearn")
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.025)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.025)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('PC1', 'PC2')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'SVM (Conjunto de Entrenamiento)',
xlab = 'CP1', ylab = 'CP2',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid==2, 'deepskyblue',
ifelse(y_grid == 1, 'springgreen3', 'tomato')))
points(set, pch = 21, bg = ifelse(set[, 3]==2, 'blue3',
ifelse(set[, 3] == 1, 'green4', 'red3')))
# VisualizaciÃ³n del conjunto de testing
set = testing_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.02)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.02)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('PC1', 'PC2')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'SVM (Conjunto de Testing)',
xlab = 'CP1', ylab = 'CP2',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid==2, 'deepskyblue',
ifelse(y_grid == 1, 'springgreen3', 'tomato')))
points(set, pch = 21, bg = ifelse(set[, 3]==2, 'blue3',
ifelse(set[, 3] == 1, 'green4', 'red3')))
