uno
#Otra opción de colores para las elipses
uno<-fviz_pca_biplot(riego.pca,
col.ind = datos1$I.S, palette = c("#00AFBB", "#E7B800", "#FC4E07"),
addEllipses = TRUE,
ellipse.type =  "t" ,
col.var = "black", repel = TRUE,
fill.var = "black",
legend.title = "Irrigation strategies",
title = NULL)
uno
#Otra opción de colores para las elipses
uno<-fviz_pca_biplot(riego.pca,
col.ind = datos1$I.S, palette = c("#00AFBB", "#E7B800", "#FC4E07"),
addEllipses = TRUE,
ellipse.type =  "t" ,
col.var = "black", repel = TRUE,
fill.var = "bold",
legend.title = "Irrigation strategies",
title = NULL)
uno
#Otra opción de colores para las elipses
uno<-fviz_pca_biplot(riego.pca,
col.ind = datos1$I.S, palette = c("#00AFBB", "#E7B800", "#FC4E07"),
addEllipses = TRUE,
ellipse.type =  "t" ,
col.var = "black", repel = TRUE, size=14,
fill.var = "black",
legend.title = "Irrigation strategies",
title = NULL)
uno
#Otra opción de colores para las elipses
uno<-fviz_pca_biplot(riego.pca,
col.ind = datos1$I.S, palette = c("#00AFBB", "#E7B800", "#FC4E07"),
addEllipses = TRUE,
ellipse.type =  "t" ,
col.var = "black", repel = TRUE,
fill.var = "black",
legend.title = "IRRIGATION STRATEGIES",
title = NULL)
uno
#Negrita en todos los textos
uno+   theme(text = element_text(size=15, face="bold"))
#Negrita en todos los textos
uno+   theme(text.var = element_text(size=15, face="bold"))
#Negrita en todos los textos
uno+   theme(text = var_text(size=15, face="bold"))
#Otra opción de colores para las elipses
uno<-fviz_pca_biplot(riego.pca,
col.ind = datos1$I.S, palette = c("#00AFBB", "#E7B800", "#FC4E07"),
addEllipses = TRUE,
ellipse.type =  "t" ,
col.var = "black", repel = TRUE, face="bold",
fill.var = "black",
legend.title = "IRRIGATION STRATEGIES",
title = NULL)
uno
#Otra opción de colores para las elipses
uno<-fviz_pca_biplot(riego.pca,
col.ind = datos1$I.S, palette = c("#00AFBB", "#E7B800", "#FC4E07"),
addEllipses = TRUE,
ellipse.type =  "t" ,
col.var = "black", repel = TRUE,
fill.var = "black",
legend.title = "IRRIGATION STRATEGIES",
title = NULL)
uno
uno+theme_few()
#Otra opción de colores para las elipses
uno<-fviz_pca_biplot(riego.pca,
col.ind = datos1$I.S, palette = c("#FC4E07", "#00AFBB", "#E7B800"),
addEllipses = TRUE,
ellipse.type =  "t" ,
col.var = "black", repel = TRUE,
fill.var = "black",
legend.title = "IRRIGATION STRATEGIES",
title = NULL)
uno
#Otra opción de colores para las elipses
uno<-fviz_pca_biplot(riego.pca,
col.ind = datos1$I.S, palette = c("#00AFBB", "#FC4E07", "#E7B800"),
addEllipses = TRUE,
ellipse.type =  "t" ,
col.var = "black", repel = TRUE,
fill.var = "black",
legend.title = "IRRIGATION STRATEGIES",
title = NULL)
uno
#Otra opción de colores para las elipses
uno<-fviz_pca_biplot(riego.pca,
col.ind = datos1$I.S, palette = c( "#E7B800","#00AFBB", "#FC4E07"),
addEllipses = TRUE,
ellipse.type =  "t" ,
col.var = "black", repel = TRUE,
fill.var = "black",
legend.title = "IRRIGATION STRATEGIES",
title = NULL)
uno
uno+theme_few()
#Quito a los datos originales “datos” las columnas 7 y 9 pero dejo CO2
datos2<-datos[,-c(7,8)]
#Transformo la primer columna en columna de referencia
datos2<- column_to_rownames(datos2, var = "ID")
View(datos2)
#Otra opción para lo mismo, quita columna 6 que no es numérica, luego escala y finalmente PCA
co2.pca <- PCA(scale(datos2[,-6]), graph = FALSE)
#Otra opción de colores para las elipses
dos<-fviz_pca_biplot(co2.pca,
col.ind = datos2$CO2, palette = c("#00AFBB", "#E7B800", "#FC4E07"),
ggtheme= theme_minimal(), # otros theme_few()
addEllipses = TRUE,
ellipse.type = "t", ellipse.level=0.95,
col.var = "black", repel = TRUE,
legend.title = "CO2 CONCENTRATION")
dos
dos+theme_few()
#Otra opción de colores para las elipses
dos<-fviz_pca_biplot(co2.pca,
col.ind = datos2$CO2, palette = c("#00AFBB", "#E7B800", "#FC4E07"),
ggtheme= theme_minimal(), # otros theme_few()
addEllipses = TRUE,
ellipse.type = "t", ellipse.level=0.95,
col.var = "black", repel = TRUE,
legend.title = "CO2 CONCENTRATION",
title = NULL)
dos
dos+theme_few()
View(datos2)
View(datos2)
#Calculo el resultado de la PCA
res.pca <- PCA(scale(datos2[,-6]), graph = FALSE)
#Lo mismo quitando titulo y en blanco y negro
# Grafico variables con colores por contribución
fviz_pca_var(res.pca,
repel = FALSE,
col.var = "black",
ggtheme = theme_minimal())
#Lo mismo quitando titulo y en blanco y negro
# Grafico variables con colores por contribución
fviz_pca_var(res.pca,
repel = FALSE,
col.var = "black",
ggtheme = theme_few())
#Lo mismo quitando titulo y en blanco y negro
fviz_pca_var(res.pca,
repel = FALSE,
col.var = "black",
title = NULL
ggtheme = theme_few())
#Lo mismo quitando titulo y en blanco y negro
fviz_pca_var(res.pca,
repel = FALSE,
col.var = "black",
title = NULL,
ggtheme = theme_few())
#Lo mismo quitando titulo y en blanco y negro
fviz_pca_var(res.pca,
repel = FALSE,
col.var = "black",
title = NULL,
ggtheme = theme_few())
#Lo mismo quitando titulo y en blanco y negro
fviz_pca_var(res.pca,
repel = FALSE,
col.var = "black",
title = "otro"
ggtheme = theme_few())
#Lo mismo quitando titulo y en blanco y negro
fviz_pca_var(res.pca,
repel = FALSE,
col.var = "black",
title = otro,
ggtheme = theme_few())
#Lo mismo quitando titulo y en blanco y negro
fviz_pca_var(res.pca,
repel = FALSE,
col.var = "black",
title = "otro",
ggtheme = theme_few())
#Lo mismo quitando titulo y en blanco y negro
fviz_pca_var(res.pca,
repel = FALSE,
col.var = "black",
title = NULL,
ggtheme = theme_few())
#Lo mismo quitando titulo y en blanco y negro
fviz_pca_var(res.pca,
repel = FALSE,
col.var = "black",
title = " ",
ggtheme = theme_few())
fviz_pca_var(res.pca,
repel = FALSE,
col.var = "black",
title = " ",
ggtheme = theme_few())
fviz_pca_var(res.pca,
repel = TRUE,
col.var = "black",
title = " ",
ggtheme = theme_few())
fviz_pca_var(res.pca,
repel = FALSE,
col.var = "black",
title = " ",
ggtheme = theme_few())
fviz_pca_var(res.pca,
repel = FALSE,
col.var = "black",
title = " ",
ggtheme = theme_bw())
fviz_pca_var(res.pca,
repel = TRUE,
col.var = "black",
title = " ",
ggtheme = theme_few())
> mymatrix <- matrix(c(156,9421,1531,14797),nrow=2,byrow=TRUE)
> colnames(mymatrix) <- c("Disease","Control")
> rownames(mymatrix) <- c("Exposed","Unexposed")
> print(mymatrix)
dataset = read.csv(("C:/Users/Jose Alza/Documents/GitHub/Curso-ML-A-a-Z/datasets/Part 1 - Data Preprocessing/Section 2 -------------------- Part 1 - Data Preprocessing --------------------/Data.csv")
)
dataset$Age = ifelse(is.na(dataset$Age),ave(dataset$Age, FUN =function(x) mean(x,na.rm=TRUE)), dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),ave(dataset$Salary, FUN =function(x) mean(x,na.rm=TRUE)), dataset$Salary)
View(dataset)
dataset$Country = factor(dataset$Country,
levels = c("France", "Spain", "Germany"),
labels = c(1, 2, 3))
dataset$Purchased = factor(dataset$Purchased,
levels = c("No", "Yes"),
labels = c(0, 1))
#En R es todo más fácil solo cargar los datos
dataset = read.csv("C:/Users/Jose Alza/Documents/GitHub/Curso-ML-A-a-Z/datasets/Part 1 - Data Preprocessing/Section 2 -------------------- Part 1 - Data Preprocessing --------------------/Data.csv")
#Tratamiento de los valores NAs
# Tratamiento de los valores NA
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
View(dataset)
#En R es todo más fácil solo cargar los datos
datos = read.csv("C:/Users/Jose Alza/Documents/GitHub/Curso-ML-A-a-Z/datasets/Part 1 - Data Preprocessing/Section 2 -------------------- Part 1 - Data Preprocessing --------------------/Data.csv")
datos = dataset
dataset = datos
# Tratamiento de los valores NA
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
View(dataset)
View(datos)
# Codificar las variables categóricas en “R”
dataset$Country = factor(dataset$Country,
levels = c("France", "Spain", "Germany"),
labels = c(1, 2, 3))
dataset$Purchased = factor(dataset$Purchased,
levels = c("No", "Yes"),
labels = c(0,1))
str(dataset)
View(dataset)
View(dataset)
dataset$Country = factor(dataset$Country,
levels = c("France", "Spain", "Germany"),
labels = c(1, 2, 3))
dataset$Purchased = factor(dataset$Purchased,
levels = c("No", "Yes"),
labels = c(0,1))
install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
split
setwd("~/GitHub/Curso-ML-A-a-Z/datasets/Part 6 - Reinforcement Learning/Section 33 - Thompson Sampling")
# Importar los datos
dataset = read.csv("Ads_CTR_Optimisation.csv")
View(dataset)
# Implementar el Muestreo de Thompson
d = 10
N = 10000
number_of_rewards_1 = integer(d)
number_of_rewards_0 = integer(d)
ads_selected = integer(0)
total_reward = 0
for(n in 1:N){
max_random = 0
ad = 0
for(i in 1:d){
random_beta = rbeta(n = 1,
shape1 = number_of_rewards_1[i]+1,
shape2 = number_of_rewards_0[i]+1)
if(random_beta > max_random){
max_random = random_beta
ad = i
}
}
ads_selected = append(ads_selected, ad)
reward = dataset[n, ad]
if(reward == 1){
number_of_rewards_1[ad] = number_of_rewards_1[ad] + 1
}else{
number_of_rewards_0[ad] = number_of_rewards_0[ad] + 1
}
total_reward = total_reward + reward
}
# Implementar el Muestreo de Thompson
d = 10
N = 10000
number_of_rewards_1 = integer(d)
number_of_rewards_0 = integer(d)
ads_selected = integer(0)
total_reward = 0
for(n in 1:N){
max_random = 0
ad = 0
for(i in 1:d){
random_beta = rbeta(n = 1,
shape1 = number_of_rewards_1[i]+1,
shape2 = number_of_rewards_0[i]+1)
if(random_beta > max_random){
max_random = random_beta
ad = i
}
}
ads_selected = append(ads_selected, ad)
reward = dataset[n, ad]
if(reward == 1){
number_of_rewards_1[ad] = number_of_rewards_1[ad] + 1
}else{
number_of_rewards_0[ad] = number_of_rewards_0[ad] + 1
}
total_reward = total_reward + reward
}
# Implementar el Muestreo de Thompson
d = 10
N = 10000
number_of_rewards_1 = integer(d)
number_of_rewards_0 = integer(d)
ads_selected = integer(0)
total_reward = 0
for(n in 1:N){
max_random = 0
ad = 0
for(i in 1:d){
random_beta = rbeta(n = 1,
shape1 = number_of_rewards_1[i]+1,
shape2 = number_of_rewards_0[i]+1)
if(random_beta > max_random){
max_random = random_beta
ad = i
}
}
ads_selected = append(ads_selected, ad)
reward = dataset[n, ad]
if(reward == 1){
number_of_rewards_1[ad] = number_of_rewards_1[ad] + 1
}else{
number_of_rewards_0[ad] = number_of_rewards_0[ad] + 1
}
total_reward = total_reward + reward
}
# Implementar el Muestreo de Thompson
d = 10
N = 10000
number_of_rewards_1 = integer(d)
number_of_rewards_0 = integer(d)
ads_selected = integer(0)
total_reward = 0
for(n in 1:N){
max_random = 0
ad = 0
for(i in 1:d){
random_beta = rbeta(n = 1,
shape1 = number_of_rewards_1[i]+1,
shape2 = number_of_rewards_0[i]+1)
if(random_beta > max_random){
max_random = random_beta
ad = i
}
}
ads_selected = append(ads_selected, ad)
reward = dataset[n, ad]
if(reward == 1){
number_of_rewards_1[ad] = number_of_rewards_1[ad] + 1
}else{
number_of_rewards_0[ad] = number_of_rewards_0[ad] + 1
}
total_reward = total_reward + reward
}
# Implementar el Muestreo de Thompson
d = 10
N = 10000
number_of_rewards_1 = integer(d)
number_of_rewards_0 = integer(d)
ads_selected = integer(0)
total_reward = 0
for(n in 1:N){
max_random = 0
ad = 0
for(i in 1:d){
random_beta = rbeta(n = 1,
shape1 = number_of_rewards_1[i]+1,
shape2 = number_of_rewards_0[i]+1)
if(random_beta > max_random){
max_random = random_beta
ad = i
}
}
ads_selected = append(ads_selected, ad)
reward = dataset[n, ad]
if(reward == 1){
number_of_rewards_1[ad] = number_of_rewards_1[ad] + 1
}else{
number_of_rewards_0[ad] = number_of_rewards_0[ad] + 1
}
total_reward = total_reward + reward
}
# Implementar el Muestreo de Thompson
d = 10
N = 10000
number_of_rewards_1 = integer(d)
number_of_rewards_0 = integer(d)
ads_selected = integer(0)
total_reward = 0
for(n in 1:N){
max_random = 0
ad = 0
for(i in 1:d){
random_beta = rbeta(n = 1,
shape1 = number_of_rewards_1[i]+1,
shape2 = number_of_rewards_0[i]+1)
if(random_beta > max_random){
max_random = random_beta
ad = i
}
}
ads_selected = append(ads_selected, ad)
reward = dataset[n, ad]
if(reward == 1){
number_of_rewards_1[ad] = number_of_rewards_1[ad] + 1
}else{
number_of_rewards_0[ad] = number_of_rewards_0[ad] + 1
}
total_reward = total_reward + reward
}
# Implementar el Muestreo de Thompson
d = 10
N = 10000
number_of_rewards_1 = integer(d)
number_of_rewards_0 = integer(d)
ads_selected = integer(0)
total_reward = 0
for(n in 1:N){
max_random = 0
ad = 0
for(i in 1:d){
random_beta = rbeta(n = 1,
shape1 = number_of_rewards_1[i]+1,
shape2 = number_of_rewards_0[i]+1)
if(random_beta > max_random){
max_random = random_beta
ad = i
}
}
ads_selected = append(ads_selected, ad)
reward = dataset[n, ad]
if(reward == 1){
number_of_rewards_1[ad] = number_of_rewards_1[ad] + 1
}else{
number_of_rewards_0[ad] = number_of_rewards_0[ad] + 1
}
total_reward = total_reward + reward
}
# Implementar el Muestreo de Thompson
d = 10
N = 10000
number_of_rewards_1 = integer(d)
number_of_rewards_0 = integer(d)
ads_selected = integer(0)
total_reward = 0
for(n in 1:N){
max_random = 0
ad = 0
for(i in 1:d){
random_beta = rbeta(n = 1,
shape1 = number_of_rewards_1[i]+1,
shape2 = number_of_rewards_0[i]+1)
if(random_beta > max_random){
max_random = random_beta
ad = i
}
}
ads_selected = append(ads_selected, ad)
reward = dataset[n, ad]
if(reward == 1){
number_of_rewards_1[ad] = number_of_rewards_1[ad] + 1
}else{
number_of_rewards_0[ad] = number_of_rewards_0[ad] + 1
}
total_reward = total_reward + reward
}
# VisualizaciÃ³n de resultados - Histograma
hist(ads_selected,
col = "lightblue",
main = "Histograma de los Anuncios",
xlab = "ID del Anuncio",
ylab = "Frecuencia absoluta del anuncio")
