# as.character(corpus[[1]])
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords(kind = "en"))
corpus = tm_map(corpus, stemDocument)
corpus = tm_map(corpus, stripWhitespace)
# Crear el modelo Bag of Words
dtm = DocumentTermMatrix(corpus)
dtm = removeSparseTerms(dtm, 0.999)
dataset = as.data.frame(as.matrix(dtm))
dataset$Liked = dataset_original$Liked
# Codificar la variable de clasificación como factor
dataset$Liked = factor(dataset$Liked, levels = c(0,1))
# Dividir los datos en conjunto de entrenamiento y conjunto de test
# install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.80)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
################################## METODO DE CLASIFICACION ############
# Ajustar el modelo de regresión logística con el conjunto de entrenamiento.
classifier = glm(formula = Purchased ~ .,
data = training_set,
family = binomial)
# Predicción de los resultados con el conjunto de testing
prob_pred = predict(classifier, type = "response",
newdata = testing_set[,692])
y_pred = ifelse(prob_pred> 0.5, 1, 0)
# Crear la matriz de confusión
cm = table(testing_set[, 692], y_pred)
# Ajustar el modelo de regresión logística con el conjunto de entrenamiento.
classifier = glm(formula = Liked ~ .,
data = training_set,
family = binomial)
# Predicción de los resultados con el conjunto de testing
prob_pred = predict(classifier, type = "response",
newdata = testing_set[,692])
y_pred = ifelse(prob_pred> 0.5, 1, 0)
# Crear la matriz de confusión
cm = table(testing_set[, 692], y_pred)
# Natural Language Processing
# Importar el data set
dataset_original = read.delim("Restaurant_Reviews.tsv", quote = '',
stringsAsFactors = FALSE)
# Limpieza de textos
# install.packages("tm")
#install.packages("SnowballC")
library(tm)
library(SnowballC)
corpus = VCorpus(VectorSource(dataset_original$Review))
corpus = tm_map(corpus, content_transformer(tolower))
# Consultar el primer elemento del corpus
# as.character(corpus[[1]])
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords(kind = "en"))
corpus = tm_map(corpus, stemDocument)
corpus = tm_map(corpus, stripWhitespace)
# Crear el modelo Bag of Words
dtm = DocumentTermMatrix(corpus)
dtm = removeSparseTerms(dtm, 0.999)
dataset = as.data.frame(as.matrix(dtm))
dataset$Liked = dataset_original$Liked
# Codificar la variable de clasificación como factor
dataset$Liked = factor(dataset$Liked, levels = c(0,1))
# Dividir los datos en conjunto de entrenamiento y conjunto de test
# install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.80)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
# Ajustar el modelo de regresión logística con el conjunto de entrenamiento.
classifier = glm(formula = Liked ~ .,
data = training_set,
family = binomial)
# Predicción de los resultados con el conjunto de testing
prob_pred = predict(classifier, type = "response",
newdata = testing_set[, 692])
classifier??
prob_pred = predict(classifier,
newdata = testing_set[, 692])
View(classifier)
predict??
??predict
# Natural Language Processing
# Importar el data set
dataset_original = read.delim("Restaurant_Reviews.tsv", quote = '',
stringsAsFactors = FALSE)
# Limpieza de textos
# install.packages("tm")
#install.packages("SnowballC")
library(tm)
library(SnowballC)
corpus = VCorpus(VectorSource(dataset_original$Review))
corpus = tm_map(corpus, content_transformer(tolower))
# Consultar el primer elemento del corpus
# as.character(corpus[[1]])
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords(kind = "en"))
corpus = tm_map(corpus, stemDocument)
corpus = tm_map(corpus, stripWhitespace)
# Crear el modelo Bag of Words
dtm = DocumentTermMatrix(corpus)
dtm = removeSparseTerms(dtm, 0.999)
dataset = as.data.frame(as.matrix(dtm))
dataset$Liked = dataset_original$Liked
# Codificar la variable de clasificación como factor
dataset$Liked = factor(dataset$Liked, levels = c(0,1))
# Dividir los datos en conjunto de entrenamiento y conjunto de test
# install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.80)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
# Ajustar el clasificador con el conjunto de entrenamiento
# y hacer las predicciones con el conjunto de testing.
library(class)
y_pred = knn(train = training_set[, 692],
test = testing_set[, 692],
cl = training_set[, 692],
k = 5)
View(dataset)
View(dataset)
# Natural Language Processing
# Importar el data set
dataset_original = read.delim("Restaurant_Reviews.tsv", quote = '',
stringsAsFactors = FALSE)
View(dataset_original)
# Limpieza de textos
# install.packages("tm")
#install.packages("SnowballC")
library(tm)
library(SnowballC)
corpus = VCorpus(VectorSource(dataset_original$Review))
corpus = tm_map(corpus, content_transformer(tolower))
# Consultar el primer elemento del corpus
# as.character(corpus[[1]])
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords(kind = "en"))
corpus = tm_map(corpus, stemDocument)
corpus = tm_map(corpus, stripWhitespace)
# Crear el modelo Bag of Words
dtm = DocumentTermMatrix(corpus)
dtm = removeSparseTerms(dtm, 0.999)
dataset = as.data.frame(as.matrix(dtm))
dataset$Liked = dataset_original$Liked
# Codificar la variable de clasificación como factor
dataset$Liked = factor(dataset$Liked, levels = c(0,1))
# Dividir los datos en conjunto de entrenamiento y conjunto de test
# install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.80)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
View(dataset_original)
View(dataset)
# Natural Language Processing
# Importar el data set
dataset_original = read.delim("Restaurant_Reviews.tsv", quote = '',
stringsAsFactors = FALSE)
# Limpieza de textos
# install.packages("tm")
#install.packages("SnowballC")
library(tm)
library(SnowballC)
corpus = VCorpus(VectorSource(dataset_original$Review))
corpus = tm_map(corpus, content_transformer(tolower))
# Consultar el primer elemento del corpus
# as.character(corpus[[1]])
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords(kind = "en"))
corpus = tm_map(corpus, stemDocument)
corpus = tm_map(corpus, stripWhitespace)
# Crear el modelo Bag of Words
dtm = DocumentTermMatrix(corpus)
dtm = removeSparseTerms(dtm, 0.999)
dataset = as.data.frame(as.matrix(dtm))
dataset$Liked = dataset_original$Liked
# Codificar la variable de clasificación como factor
dataset$Liked = factor(dataset$Liked, levels = c(0,1))
# Dividir los datos en conjunto de entrenamiento y conjunto de test
# install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.80)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
classifier = glm(formula = Liked ~ .,
data = training_set,
family = binomial)
# Predicción de los resultados con el conjunto de testing
prob_pred = predict(classifier, type = "response",
newdata = testing_set[,-692])
y_pred = ifelse(prob_pred> 0.5, 1, 0)
# Crear la matriz de confusión
cm = table(testing_set[, 692], y_pred)
#Classification method evaluation
N = cm[1,1] + cm[1,2] + cm[2,1] + cm[2,2]
Accuracy = (cm[1,1] + cm[2,2]) / N
Precision = cm[2,2] /  (cm[2,2] + cm[1,2])
Recall =  cm[2,2] /  (cm[2,2] + cm[2,1])
F1Score = 2*Precision*Recall/(Precision+Recall)
Especificidad  = cm[1,1] / (cm[1,1] + cm[1,2])
# Natural Language Processing
# Importar el data set
dataset_original = read.delim("Restaurant_Reviews.tsv", quote = '',
stringsAsFactors = FALSE)
# Limpieza de textos
# install.packages("tm")
#install.packages("SnowballC")
library(tm)
library(SnowballC)
corpus = VCorpus(VectorSource(dataset_original$Review))
corpus = tm_map(corpus, content_transformer(tolower))
# Consultar el primer elemento del corpus
# as.character(corpus[[1]])
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords(kind = "en"))
corpus = tm_map(corpus, stemDocument)
corpus = tm_map(corpus, stripWhitespace)
# Crear el modelo Bag of Words
dtm = DocumentTermMatrix(corpus)
dtm = removeSparseTerms(dtm, 0.999)
dataset = as.data.frame(as.matrix(dtm))
dataset$Liked = dataset_original$Liked
# Codificar la variable de clasificación como factor
dataset$Liked = factor(dataset$Liked, levels = c(0,1))
# Dividir los datos en conjunto de entrenamiento y conjunto de test
# install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.80)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
# y hacer las predicciones con el conjunto de testing.
library(class)
y_pred = knn(train = training_set[,-692],
test = testing_set[,-692],
cl = training_set[,692],
k = 5)
# Crear la matriz de confusión
cm = table(testing_set[, 692], y_pred)
#Classification method evaluation
N = cm[1,1] + cm[1,2] + cm[2,1] + cm[2,2]
Accuracy = (cm[1,1] + cm[2,2]) / N
Precision = cm[2,2] /  (cm[2,2] + cm[1,2])
Recall =  cm[2,2] /  (cm[2,2] + cm[2,1])
F1Score = 2*Precision*Recall/(Precision+Recall)
Especificidad  = cm[1,1] / (cm[1,1] + cm[1,2])
# Natural Language Processing
# Importar el data set
dataset_original = read.delim("Restaurant_Reviews.tsv", quote = '',
stringsAsFactors = FALSE)
# Limpieza de textos
# install.packages("tm")
#install.packages("SnowballC")
library(tm)
library(SnowballC)
corpus = VCorpus(VectorSource(dataset_original$Review))
corpus = tm_map(corpus, content_transformer(tolower))
# Consultar el primer elemento del corpus
# as.character(corpus[[1]])
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords(kind = "en"))
corpus = tm_map(corpus, stemDocument)
corpus = tm_map(corpus, stripWhitespace)
# Crear el modelo Bag of Words
dtm = DocumentTermMatrix(corpus)
dtm = removeSparseTerms(dtm, 0.999)
dataset = as.data.frame(as.matrix(dtm))
dataset$Liked = dataset_original$Liked
# Codificar la variable de clasificación como factor
dataset$Liked = factor(dataset$Liked, levels = c(0,1))
# Dividir los datos en conjunto de entrenamiento y conjunto de test
# install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.80)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
library(e1071)
classifier = svm(formula = Liked ~ .,
data = training_set,
type = "C-classification",
kernel = "linear")
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-692])
# Crear la matriz de confusión
cm = table(testing_set[, 692], y_pred)
#Classification method evaluation
N = cm[1,1] + cm[1,2] + cm[2,1] + cm[2,2]
Accuracy = (cm[1,1] + cm[2,2]) / N
Precision = cm[2,2] /  (cm[2,2] + cm[1,2])
Recall =  cm[2,2] /  (cm[2,2] + cm[2,1])
F1Score = 2*Precision*Recall/(Precision+Recall)
Especificidad  = cm[1,1] / (cm[1,1] + cm[1,2])
# Natural Language Processing
# Importar el data set
dataset_original = read.delim("Restaurant_Reviews.tsv", quote = '',
stringsAsFactors = FALSE)
# Limpieza de textos
# install.packages("tm")
#install.packages("SnowballC")
library(tm)
library(SnowballC)
corpus = VCorpus(VectorSource(dataset_original$Review))
corpus = tm_map(corpus, content_transformer(tolower))
# Consultar el primer elemento del corpus
# as.character(corpus[[1]])
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords(kind = "en"))
corpus = tm_map(corpus, stemDocument)
corpus = tm_map(corpus, stripWhitespace)
# Crear el modelo Bag of Words
dtm = DocumentTermMatrix(corpus)
dtm = removeSparseTerms(dtm, 0.999)
dataset = as.data.frame(as.matrix(dtm))
dataset$Liked = dataset_original$Liked
# Codificar la variable de clasificación como factor
dataset$Liked = factor(dataset$Liked, levels = c(0,1))
# Dividir los datos en conjunto de entrenamiento y conjunto de test
# install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.80)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
# Ajustar el clasificador con el conjunto de entrenamiento.
#install.packages("e1071")
library(e1071)
classifier = svm(formula = Liked ~ .,
data = training_set,
type = "C-classification",
kernel = "radial")
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-692])
# Crear la matriz de confusión
cm = table(testing_set[, 692], y_pred)
#Classification method evaluation
N = cm[1,1] + cm[1,2] + cm[2,1] + cm[2,2]
Accuracy = (cm[1,1] + cm[2,2]) / N
Precision = cm[2,2] /  (cm[2,2] + cm[1,2])
Recall =  cm[2,2] /  (cm[2,2] + cm[2,1])
F1Score = 2*Precision*Recall/(Precision+Recall)
Especificidad  = cm[1,1] / (cm[1,1] + cm[1,2])
# Ajustar el clasificador con el conjunto de entrenamiento.
#install.packages("e1071")
library(e1071)
classifier = svm(formula = Liked ~ .,
data = training_set,
type = "C-classification",
kernel = "linear")
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-692])
# Crear la matriz de confusión
cm = table(testing_set[, 692], y_pred)
################################## FIN CLASIFICACION #################
#Classification method evaluation
N = cm[1,1] + cm[1,2] + cm[2,1] + cm[2,2]
Accuracy = (cm[1,1] + cm[2,2]) / N
Precision = cm[2,2] /  (cm[2,2] + cm[1,2])
Recall =  cm[2,2] /  (cm[2,2] + cm[2,1])
F1Score = 2*Precision*Recall/(Precision+Recall)
Especificidad  = cm[1,1] / (cm[1,1] + cm[1,2])
# Ajustar el clasificador con el conjunto de entrenamiento.
#install.packages("e1071")
library(e1071)
classifier = svm(formula = Liked ~ .,
data = training_set,
type = "C-classification",
kernel = "polynomial")
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-692])
# Crear la matriz de confusión
cm = table(testing_set[, 692], y_pred)
################################## FIN CLASIFICACION #################
#Classification method evaluation
N = cm[1,1] + cm[1,2] + cm[2,1] + cm[2,2]
Accuracy = (cm[1,1] + cm[2,2]) / N
Precision = cm[2,2] /  (cm[2,2] + cm[1,2])
Recall =  cm[2,2] /  (cm[2,2] + cm[2,1])
F1Score = 2*Precision*Recall/(Precision+Recall)
Especificidad  = cm[1,1] / (cm[1,1] + cm[1,2])
# Ajustar el clasificador con el conjunto de entrenamiento.
#install.packages("e1071")
library(e1071)
classifier = svm(formula = Liked ~ .,
data = training_set,
type = "C-classification",
kernel = "sigmoid")
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-692])
# Crear la matriz de confusión
cm = table(testing_set[, 692], y_pred)
################################## FIN CLASIFICACION #################
#Classification method evaluation
N = cm[1,1] + cm[1,2] + cm[2,1] + cm[2,2]
Accuracy = (cm[1,1] + cm[2,2]) / N
Precision = cm[2,2] /  (cm[2,2] + cm[1,2])
Recall =  cm[2,2] /  (cm[2,2] + cm[2,1])
F1Score = 2*Precision*Recall/(Precision+Recall)
Especificidad  = cm[1,1] / (cm[1,1] + cm[1,2])
# Natural Language Processing
# Importar el data set
dataset_original = read.delim("Restaurant_Reviews.tsv", quote = '',
stringsAsFactors = FALSE)
# Limpieza de textos
# install.packages("tm")
#install.packages("SnowballC")
library(tm)
library(SnowballC)
corpus = VCorpus(VectorSource(dataset_original$Review))
corpus = tm_map(corpus, content_transformer(tolower))
# Consultar el primer elemento del corpus
# as.character(corpus[[1]])
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords(kind = "en"))
corpus = tm_map(corpus, stemDocument)
corpus = tm_map(corpus, stripWhitespace)
# Crear el modelo Bag of Words
dtm = DocumentTermMatrix(corpus)
dtm = removeSparseTerms(dtm, 0.999)
dataset = as.data.frame(as.matrix(dtm))
dataset$Liked = dataset_original$Liked
# Codificar la variable de clasificación como factor
dataset$Liked = factor(dataset$Liked, levels = c(0,1))
# Dividir los datos en conjunto de entrenamiento y conjunto de test
# install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.80)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
# Ajustar el clasificador con el conjunto de entrenamiento.
#install.packages("e1071")
library(e1071)
classifier = naiveBayes(x = training_set[,-692],
y = training_set$Liked)
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-692])
# Crear la matriz de confusión
cm = table(testing_set[, 692], y_pred)
#Classification method evaluation
N = cm[1,1] + cm[1,2] + cm[2,1] + cm[2,2]
Accuracy = (cm[1,1] + cm[2,2]) / N
Precision = cm[2,2] /  (cm[2,2] + cm[1,2])
Recall =  cm[2,2] /  (cm[2,2] + cm[2,1])
F1Score = 2*Precision*Recall/(Precision+Recall)
Especificidad  = cm[1,1] / (cm[1,1] + cm[1,2])
cm
# Natural Language Processing
# Importar el data set
dataset_original = read.delim("Restaurant_Reviews.tsv", quote = '',
stringsAsFactors = FALSE)
# Limpieza de textos
# install.packages("tm")
#install.packages("SnowballC")
library(tm)
library(SnowballC)
corpus = VCorpus(VectorSource(dataset_original$Review))
corpus = tm_map(corpus, content_transformer(tolower))
# Consultar el primer elemento del corpus
# as.character(corpus[[1]])
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords(kind = "en"))
corpus = tm_map(corpus, stemDocument)
corpus = tm_map(corpus, stripWhitespace)
# Crear el modelo Bag of Words
dtm = DocumentTermMatrix(corpus)
dtm = removeSparseTerms(dtm, 0.999)
dataset = as.data.frame(as.matrix(dtm))
dataset$Liked = dataset_original$Liked
# Codificar la variable de clasificación como factor
dataset$Liked = factor(dataset$Liked, levels = c(0,1))
# Dividir los datos en conjunto de entrenamiento y conjunto de test
# install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.80)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
# Ajustar el clasificador con el conjunto de entrenamiento.
#install.packages("rpart")
library(rpart)
classifier = rpart(formula = Liked ~ .,
data = training_set)
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-692],
type = "class")
# Crear la matriz de confusión
cm = table(testing_set[, 692], y_pred)
cm
#Classification method evaluation
N = cm[1,1] + cm[1,2] + cm[2,1] + cm[2,2]
Accuracy = (cm[1,1] + cm[2,2]) / N
Precision = cm[2,2] /  (cm[2,2] + cm[1,2])
Recall =  cm[2,2] /  (cm[2,2] + cm[2,1])
F1Score = 2*Precision*Recall/(Precision+Recall)
Especificidad  = cm[1,1] / (cm[1,1] + cm[1,2])
library(rpart)
